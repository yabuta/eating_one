#include <stdio.h>
#include <stdint.h>
#include <cuda.h>
#include <sys/time.h>
#include "tuple.h"

extern "C" {
__global__ void join(
          TUPLE *lt,
          TUPLE *rt,
          RESULT *jt,
          int *count,
          int *r_p,
          int *radix,
          int *lp,
          int right,
          int left
          ) 
{

  int x = blockIdx.x*blockDim.x + threadIdx.x;

  //insert partition left table in shared memory
  __shared__ TUPLE sub_lt[B_ROW_NUM];

  //printf("ok %d\n",lp[blockIdx.x+1] - lp[blockIdx.x]);

  for(int i=threadIdx.x; i<lp[blockIdx.x+1] - lp[blockIdx.x] ; i += BLOCK_SIZE_X){
    sub_lt[i].key = lt[lp[blockIdx.x]+i].key;
    sub_lt[i].val = lt[lp[blockIdx.x]+i].val;
    
  }

  __syncthreads();


  //printf("%d\t%d\t%d\n",radix[blockIdx.x]+1,radix[blockIdx.x],x);

  for(int k=threadIdx.x ; k<r_p[radix[blockIdx.x]+1] - r_p[radix[blockIdx.x]] ; k += BLOCK_SIZE_X){
    for(int i=0; i<lp[blockIdx.x+1] - lp[blockIdx.x] ;i++){
      if(sub_lt[i].val == rt[r_p[radix[blockIdx.x]]+k].val){
        jt[count[x]].rkey = rt[r_p[radix[blockIdx.x]]+k].key;
        jt[count[x]].rval = rt[r_p[radix[blockIdx.x]]+k].val;
        jt[count[x]].lkey = sub_lt[i].key;
        jt[count[x]].lval = sub_lt[i].val;
        count[x]++;
        
      }
      //printf("%d\t%d\n",sub_lt[i].val,rt[r_p[radix[blockIdx.x]]+k].val);
    }
  }
    
}    

}
