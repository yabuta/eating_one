#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <unistd.h>
#include <string.h>
#include <sys/time.h>
#include <error.h>
#include "tuple.h"
#include "debug.h"


int left;
int right;

TUPLE *Tright;
TUPLE *Tleft;
JOIN_TUPLE *Tjoin;

void diffplus(long *total,struct timeval begin,struct timeval end){
  *total += (end.tv_sec - begin.tv_sec) * 1000 * 1000 + (end.tv_usec - begin.tv_usec);
  
}



static int
getTupleId(void)
{
  static int id;
  
  return ++id;
}


static void
getJoinTuple(TUPLE *lt, TUPLE *rt,JOIN_TUPLE *jt)
{
  int i;

  jt->lval = lt->val;
  jt->rval = rt->val;    
  // lid & rid are just for debug
  jt->lid = lt->id;
  jt->rid = rt->id;
  
}


int
join()
{

  int i,j;
  static int count=0;
  for (i = 0 ; i < left ; i++) {
    for (j = 0 ; j < right ; j++) {
      if(Tleft[i].val == Tright[j].val){
        getJoinTuple(&(Tleft[i]),&(Tright[j]),&(Tjoin[count]));
        count++;
      }
    }
  }

  printf("%d\n",count);

  return count;

}


void
init(void)
{

  if (!(Tright = (TUPLE *)calloc(right, sizeof(TUPLE)))) ERR;
  if (!(Tleft = (TUPLE *)calloc(left, sizeof(TUPLE)))) ERR;
  if (!(Tjoin = (JOIN_TUPLE *)calloc(JT_SIZE, sizeof(JOIN_TUPLE)))) ERR;

}




//メモリ解放のため新しく追加した関数。バグがあるかも
void
tuple_free(void){


  free(Tleft);
  free(Tright);
  free(Tjoin);

}


int
main(int argc, char *argv[])
{

  struct timeval time_s,time_f;
  double time_cal;
  int jt_size;
  FILE *lp,*rp;

  struct timeval leftread_time_s, leftread_time_f;
  struct timeval rightread_time_s, rightread_time_f;
  struct timeval hashjoin_s, hashjoin_f;
  long leftread_time = 0,rightread_time = 0,hashjoin_time = 0;


  /*******************init array*************************************/
  init();
  /*****************************************************************/


  /*全体の実行時間計測*/


  gettimeofday(&time_s,NULL);


  //read table size from both table file
  if((lp=fopen(LEFT_FILE,"r"))==NULL){
    fprintf(stderr,"file open error(left)\n");
    exit(1);
  }
  if(fread(&left,sizeof(int),1,lp)<1){
    fprintf(stderr,"file write error\n");
    exit(1);
  }

  if((rp=fopen(RIGHT_FILE,"r"))==NULL){
    fprintf(stderr,"file open error(right)\n");
    exit(1);
  }
  if(fread(&right,sizeof(int),1,rp)<1){
    fprintf(stderr,"file write error\n");
    exit(1);
  }

#ifdef SIZEREADFILE
  left = LSIZE;
  right = RSIZE;
#endif

  printf("left size = %d\tright size = %d\n",left,right);

  int lsize = left,rsize = right;

  Tleft = (TUPLE *)malloc(lsize*sizeof(TUPLE));
  Tright = (TUPLE *)malloc(rsize*sizeof(TUPLE));

  while(1){
    gettimeofday(&leftread_time_s, NULL);
    if((left=fread(Tleft,sizeof(TUPLE),lsize,lp))<0){
      fprintf(stderr,"file write error\n");
      exit(1);
    }
    if(left == 0) break;
    gettimeofday(&leftread_time_f, NULL);
    diffplus(&leftread_time,leftread_time_s,leftread_time_f);

    while(1){
      gettimeofday(&rightread_time_s, NULL);
      if((right=fread(Tright,sizeof(TUPLE),rsize,rp))<0){
        fprintf(stderr,"file write error\n");
        exit(1);
      }
      if(right == 0) break;
      gettimeofday(&rightread_time_f, NULL);
      diffplus(&rightread_time,rightread_time_s,rightread_time_f);


      gettimeofday(&hashjoin_s, NULL);
      jt_size = join();
      gettimeofday(&hashjoin_f, NULL);
      diffplus(&hashjoin_time,hashjoin_s,hashjoin_f);

    }
    if(fseek(rp,sizeof(int),0)!=0){
      fprintf(stderr,"file seek error.\n");
      exit(1);
    }
  }
  fclose(lp);
  fclose(rp);

  gettimeofday(&time_f,NULL);

  time_cal=(time_f.tv_sec-time_s.tv_sec)*1000*1000+(time_f.tv_usec-time_s.tv_usec);
  printf("Caluculation with Devise    : %6f(miri sec)\n",time_cal/1000);
  printf("file read time:\n");
  printf("Diff: %ld us (%ld ms)\n", leftread_time+rightread_time, (leftread_time+rightread_time)/1000\
         );
  printf("hash join time:\n");
  printf("Diff: %ld us (%ld ms)\n", hashjoin_time, hashjoin_time/1000);
  printf("result table size = %d\n",jt_size);
  printf("\n\n");



  //結果の表示　むやみにやったら死ぬので気を付ける
  /*
  for(int i=0;i < right*left ;i++){
    if(i%100000==0){
      printf("id = %d\n",Tjoin[i].id);
      for(int j=0;j<VAL_NUM;j++){
        printf("lval[%d] = %d\trval[%d] = %d\n",j,Tjoin[i].lval[j],j,Tjoin[i].rval[j]);
        
      }
    }

  }
  */

  //割り当てたメモリを開放する
  tuple_free();

  return 0;
}
